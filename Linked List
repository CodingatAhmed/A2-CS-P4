class Node:
    def __init__(self,data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def insert_at_End(self,data):
        newNode = Node(data)
        if self.head == None:
            self.head = newNode
        else:
            currentNode = self.head
            while currentNode.next != None:
                currentNode = currentNode.next
            currentNode.next = newNode
    
    def delete_at_End(self):
        currentNode = self.head
        while currentNode.next.next != None:
            currentNode = currentNode.next
        currentNode.next = None
    
    def insert_at_front(self,data):
        newNode = Node(data)
        if self.head == None:
            self.head = newNode
        else:
            newNode.next = self.head
            self.head = newNode
    
    def Traversal(self):
        currentNode = self.head
        while currentNode != None:
            print(currentNode.data)
            currentNode = currentNode.next
    
    def delete_at_front(self):
        self.head = self.head.next
    
    def insert_at_Index(self,data,index):
        position = 0
        currentNode = self.head
        newNode = Node(data)
        while position != index:
            currentNode = currentNode.next
            position += 1
        newNode.next = currentNode.next
        currentNode.next = newNode

myLinkedList = LinkedList()

myLinkedList.insert_at_End(5)

myLinkedList.insert_at_End(56)

myLinkedList.insert_at_End(87)

myLinkedList.insert_at_End(70)

# myLinkedList.delete_at_End()

myLinkedList.insert_at_front(45)

# myLinkedList.delete_at_front()

myLinkedList.insert_at_Index(3,2)

myLinkedList.Traversal()
